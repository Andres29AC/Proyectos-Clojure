{"version":3,"sources":["blog/pages/Archives/archives.cljs"],"mappings":"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","names":["js/blog","js/blog.pages","js/blog.pages.Archives","js/blog.pages.Archives.archives","js/blog.pages.Archives.archives.current-component","blog.pages.Archives.archives/current-component","reagent.core.atom","blog.pages.Archives.archives/post-component","post","index","tag-index","map__6706","cljs.core/--destructure-map","cljs.core.get","name","url","cljs.core._EQ_","cljs.core/reset!","blog.pages.Posts.Fuctional.post1/post1","blog.pages.Archives.archives/tag-component","tag","posts","blog.services.tag/tag-posts","iter__5480__auto__","s__6708","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__6710","cljs.core/chunk-buffer","i__6709","vec__6711","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__6707","cljs.core/chunk-rest","vec__6714","cljs.core/first","cljs.core/cons","cljs.core/rest","post-index","cljs.core.map_indexed","cljs.core/vector","blog.pages.Archives.archives/archive-page","tags","blog.services.tag/update-tags","cljs.core/not","cljs.core/deref","s__6718","b__6720","i__6719","vec__6721","iter__6717","vec__6724","cljs.core/chunk-first"],"sourcesContent":["\r\n;;TODO: Version para imprimir por consola\r\n;; (ns blog.pages.Archives.archives\r\n;;   (:require [blog.services.tag :refer [tag-posts update-tags]]\r\n;;             [blog.services.post :refer [posts]]\r\n;;             [blog.pages.Posts.Fuctional.post1 :refer [post1]]))\r\n\r\n;; (defn post-component [post index tag-index]\r\n;;   (let [{:keys [name url]} post]\r\n;;     [:div {:class \"post-item\"}\r\n;;      ;; Si es el primer post del quinto tag (index = 0, tag-index = 5):\r\n;;      (if (and (= index 0) (= tag-index 5))\r\n;;        [:a {:href \"#\" :class \"text-blue-600 dark:text-blue-400 hover:underline\"\r\n;;             :on-click #(js/console.log \"Renderizando pagina post1.cljs\")}\r\n;;         name]\r\n;;        ;; Caso normal: Usar el URL definido en el post\r\n;;        [:a {:href url :class \"text-blue-600 dark:text-blue-400 hover:underline\"} name])]))\r\n\r\n;; (defn tag-component [tag posts tag-index]\r\n;;   (println \"Tag\" tag-index \":\" (:name tag)) ;; Imprime la posicion y nombre del tag\r\n;;   [:div {:class \"tag-container\"}\r\n;;    [:h2 {:class \"text-lg font-semibold\"} (str \"Tag: \" (:name tag))]\r\n;;    [:p {:class \"text-sm text-gray-600\"} (str \"Number of posts: \" (:post-count tag))]\r\n;;    (when (seq posts)\r\n;;      (doseq [[post-index post] (map-indexed vector posts)]\r\n;;        (println \"  Post\" post-index \":\" (:name post))) ;; Imprime los posts de ese tag\r\n;;      (for [[post-index post] (map-indexed vector posts)]\r\n;;        ^{:key (:name post)}\r\n;;        [post-component post post-index tag-index]))])\r\n\r\n;; (defn archive-page []\r\n;;   (let [tags (update-tags)]\r\n;;     [:div {:class \"archive-container\"}\r\n;;      (do\r\n;;        (doseq [[index tag] (map-indexed vector tags)]\r\n;;          (let [posts (tag-posts (:name tag))]\r\n;;            (doseq [[post-index post] (map-indexed vector posts)]\r\n;;              (println \"  Post\" post-index \":\" (:name post)))))\r\n;;        (for [[index tag] (map-indexed vector tags)]\r\n;;          ^{:key (:name tag)}\r\n;;          (let [posts (tag-posts (:name tag))]\r\n;;            [tag-component tag posts index])))]))\r\n\r\n\r\n;;TODO: Version -> Passed\r\n\r\n(ns blog.pages.Archives.archives\r\n  (:require [reagent.core :as r]\r\n            [blog.services.tag :refer [tag-posts update-tags]]\r\n            [blog.pages.Posts.Fuctional.post1 :refer [post1]]))\r\n\r\n(defonce current-component (r/atom nil))\r\n\r\n(defn post-component [post index tag-index]\r\n  (let [{:keys [name url]} post]\r\n    [:div {:class \"p-2\"}\r\n     (if (and (= index 0) (= tag-index 5))\r\n       [:a {:href \"#\"\r\n            :class \"text-blue-500 dark:text-blue-400 hover:underline\"\r\n            :on-click #(reset! current-component post1)}\r\n        name]\r\n       [:a {:href url :class \"text-blue-500 dark:text-blue-400 hover:underline\"} name])]))\r\n\r\n(defn tag-component [tag tag-index]\r\n  (let [posts (tag-posts (:name tag))]\r\n    [:div {:class \"bg-gray-900 shadow-lg rounded-lg p-4 relative\"}  \r\n     [:div {:class \"absolute top-2 right-2 p-1 bg-gray-800 rounded-full\"} \r\n      [:img {:src \"assets/svg/programmer2.svg\" :alt \"icono\" :class \"w-10 h-10\"}]] \r\n     [:div {:class \"flex items-center mb-4\"}\r\n      [:div {:class \"flex-shrink-0 bg-blue-500 text-white rounded-full p-2\"}\r\n       [:svg {:xmlns \"http://www.w3.org/2000/svg\"\r\n              :fill \"none\"\r\n              :viewBox \"0 0 24 24\"\r\n              :stroke-width \"2\"\r\n              :stroke \"currentColor\"\r\n              :class \"w-6 h-6\"}\r\n        [:path {:stroke-linecap \"round\" :stroke-linejoin \"round\" :d \"M12 4.5l7.5 7.5-7.5 7.5m-6-7.5h12\"}]]]\r\n      [:h2 {:class \"text-lg font-semibold text-white ml-4\"} (:name tag)]]\r\n     [:p {:class \"text-sm text-gray-400 mb-2\"} (str \"Number of posts: \" (:post-count tag))]\r\n     (for [[post-index post] (map-indexed vector posts)]\r\n       ^{:key (:name post)}\r\n       [post-component post post-index tag-index])]))\r\n\r\n(defn archive-page []\r\n  (let [tags (update-tags)]\r\n    [:div {:class \"p-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\"}\r\n     (if-not @current-component\r\n       (for [[index tag] (map-indexed vector tags)]\r\n         ^{:key (:name tag)}\r\n         [tag-component tag index])\r\n       [@current-component])]))\r\n"]}